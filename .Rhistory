points(rep(4, N),Y[,4], pch = 20, col = 'grey40')
K_y <- 8
basis_Y <- create.fourier.basis(rangeval = c(0,12),
nbasis = K_y)
Phi <- t(eval.basis(1:12, basis_Y)) #dimension K_y x n
C_hat <- as.matrix(Y) %*% t(Phi) %*% solve(Phi %*% t(Phi))
dense_t_grid <- seq(0,12, by = 0.1) #as much density as we want
grid_phi <- eval.basis(dense_t_grid, basis_Y)
Y_dense <- C_hat %*% t(grid_phi)
attach(data_split[[7]])
# Covariate design matrix
latitude <- scale(Latitude, scale = TRUE)
altitude <- scale(Altitude, scale = TRUE)
X <- model.matrix(~ Region + latitude + altitude)
colnames(X) <- c('Mean', levels(data$Region)[1:5],
'Latitude', 'Altitude')
p <- ncol(X)
attr(latitude)
attr(latitude, "scaled:scale")
new_altitude <- scale(300, center = attr(altitude,  "scaled:center"), scale = attr(altitude,  "scaled:scale"))
mu_predict <- sapply(dense_t_grid, function(x) beta[,x]*newdata)
newdata <- c(1, 0, 0, 0, 1, new_latitude, new_altitude)
mu_predict <- sapply(dense_t_grid, function(x) beta[,x]*newdata)
new_latitude <- scale(-20, center = attr(latitude,  "scaled:center"), scale = attr(latitude,  "scaled:scale"))
new_altitude <- scale(300, center = attr(altitude,  "scaled:center"), scale = attr(altitude,  "scaled:scale"))
newdata <- c(1, 0, 0, 0, 1, new_latitude, new_altitude)
mu_predict <- sapply(dense_t_grid, function(x) beta[,x]*newdata)
plot(mu_predict)
new_latitude <- scale(-20, center = attr(latitude,  "scaled:center"), scale = attr(latitude,  "scaled:scale"))
new_altitude <- scale(300, center = attr(altitude,  "scaled:center"), scale = attr(altitude,  "scaled:scale"))
newdata <- c(1, 0, 0, 0, 1, new_latitude, new_altitude)
mu_predict <- aapply(beta,2,function(x) x*newdata)
plot(mu_predict)
mu_predict <- apply(beta,2, function(x) x*newdata)
new_latitude <- scale(-20, center = attr(latitude,  "scaled:center"), scale = attr(latitude,  "scaled:scale"))
new_altitude <- scale(300, center = attr(altitude,  "scaled:center"), scale = attr(altitude,  "scaled:scale"))
newdata <- c(1, 0, 0, 0, 1, 0, new_latitude, new_altitude)
mu_predict <- apply(beta,2, function(x) x*newdata)
plot(mu_predict)
apply(beta,2, function(x) x*newdata)
mu_predict <- apply(beta,2, function(x) sum(x*newdata))
plot(mu_predict)
new_latitude <- scale(-20, center = attr(latitude,  "scaled:center"), scale = attr(latitude,  "scaled:scale"))
new_altitude <- scale(300, center = attr(altitude,  "scaled:center"), scale = attr(altitude,  "scaled:scale"))
newdata <- c(1, 0, 0, 0, 1, 0, new_latitude, new_altitude)
mu_predict <- apply(beta,2, function(x) sum(x*newdata))
plot(mu_predict, type = 'l', main = 'Estimation for new location')
std_errors_pred <- function(t){
theta_t <- t(eval.basis(t, basis_beta)) #column vector
#The V matrix and its names
V <- (t(theta_t) %x% diag(p)) %*% solve(U) %*% (t(M) %x% t(X))
rownames(V) <- colnames(X)
sigma2_t <- sigma2[which(dense_t_grid == t)]
vcov_t <- V %*% (diag(n) %x% (sigma2_t * diag(N))) %*% t(V)
return(sqrt(diag(vcov_t)))
}
seq <- seq(0, 12, by = 0.2)
std_errors <- sapply(seq, std_errors)
std_errors
newdata
newdata*std_errors[,1]
apply(std_errors, 2, function(x) crossprod(newdata*x, newdata))
estim_errors <- apply(std_errors, 2, function(x) sqrt(crossprod(newdata*x, newdata)))
Upper_estim <- mu_predict + estim_errors*qnorm(0.95)
Lower_estim <- mu_predict - estim_errors*qnorm(0.95)
plot(mu_predict, type = 'l', main = 'Estimation for new location')
segments(x0 = seq,
y0 = t(Lower_estim),
y1 = t(Upper_estim),
col = 'steelblue', lwd = 2)
lines(dense_t_grid, mu_predict, lwd = 1)
estim_errors <- apply(std_errors, 2, function(x) sqrt(crossprod(newdata*x, newdata)))
Upper_estim <- mu_predict + estim_errors*qnorm(0.95)
Lower_estim <- mu_predict - estim_errors*qnorm(0.95)
estim_errors
estim_errors*qnorm(0.95)
options(repos = c(CRAN = "https://cran.rstudio.com"))
knitr::opts_chunk$set(echo = TRUE, fig.width=4, fig.height=4, fig.align = 'center', comment = NA)
options(contrasts = c("contr.sum", "contr.poly"))
source('librerias y funciones.R')
palette(paletteer::paletteer_c("grDevices::Dark 3", 4))
library(readr)
data <- read_csv("Argentina_weather.csv",
col_types = cols(Ene = col_number(),
Feb = col_number(), Mar = col_number(),
Abr = col_number(), May = col_number(),
Jun = col_number(), Jul = col_number(),
Ago = col_number(), Sep = col_number(),
Oct = col_number(), Nov = col_number(),
Dic = col_number()))
data <- data[1:608, ]
data$Region <- as.factor(data$Region)
data_split <- split(data, data$`Mean value`)
Y <- as.matrix(data_split[[7]][,7:18])   # N x n response matrix (12
N <- nrow(Y)
n <- ncol(Y)
rownames(Y) <- as.matrix(data_split[[1]][,1])
graph_par()
matplot(t(Y), type = 'l', lty = 1)
text(9.7, 2, TeX('$Y_{71}(t)'), col = N)
lines(1:12, Y[N,], col = N, lwd = 2)
abline(v=4, lty= 2, col = 'grey80')
text(5, 27, expression(y(4)))
points(rep(4, N),Y[,4], pch = 20, col = 'grey40')
K_y <- 8
basis_Y <- create.fourier.basis(rangeval = c(0,12),
nbasis = K_y)
Phi <- t(eval.basis(1:12, basis_Y)) #dimension K_y x n
C_hat <- as.matrix(Y) %*% t(Phi) %*% solve(Phi %*% t(Phi))
dense_t_grid <- seq(0,12, by = 0.1) #as much density as we want
grid_phi <- eval.basis(dense_t_grid, basis_Y)
Y_dense <- C_hat %*% t(grid_phi)
attach(data_split[[7]])
# Covariate design matrix
latitude <- scale(Latitude, scale = TRUE)
altitude <- scale(Altitude, scale = TRUE)
X <- model.matrix(~ Region + latitude + altitude)
colnames(X) <- c('Mean', levels(data$Region)[1:5],
'Latitude', 'Altitude')
p <- ncol(X)
X[1:10,]
# Basis for beta functions
K_beta <- 5
basis_beta <- create.fourier.basis(rangeval = c(0,12),
nbasis = K_beta)
library(fda)
#Matrices matrices
J_YY <- inprod(basis_Y, basis_beta)
J_BB <- inprod(basis_beta, basis_beta)
J_YB <- inprod(basis_Y, basis_beta)
R <- eval.penalty(basis_beta, int2Lfd(2))
#Roughness penalty parameter
lambda <- 0.0000001
# Estimate B
vec_B <- solve(J_BB %x% (t(X) %*% X) + R %x% (lambda*diag(p))) %*% as.vector(t(X) %*% C_hat %*% J_YB)
B <- matrix(vec_B, nrow = ncol(X), ncol = basis_beta$nbasis, byrow = FALSE)
rownames(B) <- colnames(X)
colnames(B) <- basis_beta$names
beta <- B %*% t(eval.basis(dense_t_grid, basis_beta))
graph_par(c(2,2))
par(mar=c(1.2,2,1.5,2), cex.main = 0.9)
plot(dense_t_grid, beta[1,], main = 'Intercept', type = 'l',
ylab = 'temp', lwd = 2)
regions <- rbind(beta[2:6,], -apply(beta[2:6,],2,sum))
rownames(regions) <- levels(data$Region)
matplot(dense_t_grid, t(regions), main = 'Regions', lty = 1,
type = 'l', ylab = '', lwd = 2)
plot(dense_t_grid, beta[7,], main = 'Latitude', type = 'l', ylab = 'temp',
lwd = 2)
plot(dense_t_grid, beta[8,], main = 'Altitude', type = 'l', ylab = '',
lwd = 2)
par(mfrow = c(3,2))
par(mar=c(1,1,1,2))
for(j in 1:6){
plot(dense_t_grid, beta[1,], type = 'l',
ylab = '', lwd = 2, lty = 3,
xaxt = 'n', las = 2, ylim = c(6, 27))
lines(dense_t_grid, beta[1,] + regions[j,],
lwd = 2, col = j)
text(6.5, 23, levels(data$Region)[j])
}
Y_fitted <- X %*% beta
graph_par()
matplot(dense_t_grid, t(Y_fitted),
ylab = 'y fitted', type = 'l', lty = 1)
Theta <- t(eval.basis(1:12, basis_beta))
M <- t(Phi) %*% solve(Phi %*% t(Phi)) %*% J_YB
U <- J_BB %x% (t(X) %*% X) + R %x% (lambda*diag(p))
H <- (t(Theta) %x% X) %*% solve(U) %*% (t(M) %x% t(X))
#Effective degrees of freedom
df <- sum(diag(H))
#The residual functions (high resolution)
resid <-t(Y_dense - Y_fitted)
SQe <- apply(resid, 2, function(x) sum(x^2))
idx <- order(SQe, decreasing = TRUE)[1:2]
graph_par(c(1,2))
plot(dense_t_grid, Y_dense[idx[1],], type = 'l', lwd = 2, main = row.names(Y)[idx[1]],
col = 16, ylab = 'temp', ylim = c(0,30))
lines(dense_t_grid, Y_fitted[idx[1],], lty = 2)
text(9, -3, 'fitted', cex = 1)
plot(dense_t_grid, Y_dense[idx[2],], type = 'l', lwd = 2, main = row.names(Y)[idx[2]],
col = 68, ylab = 'temp', ylim = c(0,30))
lines(dense_t_grid, Y_fitted[idx[2],], lty = 2)
text(11, -10, 'fitted', cex = 1)
graph_par()
sigma2 <- apply(resid, 1, sd)
graph_par()
plot(dense_t_grid, sqrt(sigma2), type = 'l', main = 'Residual standard deviation', ylab = '')
t <- 7
theta_t <- t(eval.basis(t, basis_beta)) #column vector
#The V matrix and its names
V <- (t(theta_t) %x% diag(p)) %*% solve(U) %*% (t(M) %x% t(X))
rownames(V) <- colnames(X)
sigma2_t <- sigma2[which(dense_t_grid == t)]
vcov_t <- V %*% (diag(n) %x% (sigma2_t * diag(N))) %*% t(V)
knitr::kable(t(sqrt(diag(vcov_t))), caption = 'Standard errors of regression coefficients coefficients in t=7')
std_errors <- function(t){
theta_t <- t(eval.basis(t, basis_beta)) #column vector
#The V matrix and its names
V <- (t(theta_t) %x% diag(p)) %*% solve(U) %*% (t(M) %x% t(X))
rownames(V) <- colnames(X)
sigma2_t <- sigma2[which(dense_t_grid == t)]
vcov_t <- V %*% (diag(n) %x% (sigma2_t * diag(N))) %*% t(V)
return(sqrt(diag(vcov_t)))
}
seq <- seq(0, 12, by = 0.2)
beta_months <-  B %*% t(eval.basis(seq, basis_beta))
std_errors <- sapply(seq, std_errors)
Upper <- beta_months[c(1,7,8),] + std_errors[c(1,7,8),]*qnorm(0.95)
Lower <- beta_months[c(1,7,8),] - std_errors[c(1,7,8),]*qnorm(0.95)
par(mfrow=c(1,2))
plot(dense_t_grid,beta[7,], type = 'l', main = 'Latitude', xlab = '',
ylab = '', ylim = c(3,4.5))
segments(x0 = seq,
y0 = t(Lower[2,]),
y1 = t(Upper[2,]),
col = 'lightpink', lwd = 2)
lines(dense_t_grid, beta[7,], lwd = 2)
plot(dense_t_grid,beta[8,], type = 'l', main = 'Altitude', xlab = '',
ylab = '', ylim = c(-3, -1.5))
segments(x0 = seq,
y0 = t(Lower[3,]),
y1 = t(Upper[3,]),
col = 'lightgreen', lwd = 2)
lines(dense_t_grid, beta[8,], lwd = 2)
plot(dense_t_grid,beta[1,], type = 'l', main = 'Overall mean', xlab = '',
ylab = '', ylim = c(0, 25))
segments(x0 = seq,
y0 = t(Lower[1,]),
y1 = t(Upper[1,]),
col = 'salmon', lwd = 2)
lines(dense_t_grid, beta[1,], lwd = 1)
new_latitude <- scale(-20, center = attr(latitude,  "scaled:center"), scale = attr(latitude,  "scaled:scale"))
new_altitude <- scale(300, center = attr(altitude,  "scaled:center"), scale = attr(altitude,  "scaled:scale"))
newdata <- c(1, 0, 0, 0, 1, 0, new_latitude, new_altitude)
mu_predict <- apply(beta,2, function(x) sum(x*newdata))
estim_errors <- apply(std_errors, 2, function(x) sqrt(crossprod(newdata*x, newdata)))
new_latitude <- scale(-20, center = attr(latitude,  "scaled:center"), scale = attr(latitude,  "scaled:scale"))
new_altitude <- scale(300, center = attr(altitude,  "scaled:center"), scale = attr(altitude,  "scaled:scale"))
newdata <- c(1, 0, 0, 0, 1, 0, new_latitude, new_altitude)
mu_predict <- apply(eval.basis(dense_t_grid, basis_beta),2, function(x) sum(x*newdata))
mu_predict <- apply(B %*% t(eval.basis(seq, basis_beta)),2, function(x) sum(x*newdata))
options(repos = c(CRAN = "https://cran.rstudio.com"))
knitr::opts_chunk$set(echo = TRUE, fig.width=4, fig.height=4, fig.align = 'center', comment = NA)
options(contrasts = c("contr.sum", "contr.poly"))
source('librerias y funciones.R')
palette(paletteer::paletteer_c("grDevices::Dark 3", 4))
library(readr)
data <- read_csv("Argentina_weather.csv",
col_types = cols(Ene = col_number(),
Feb = col_number(), Mar = col_number(),
Abr = col_number(), May = col_number(),
Jun = col_number(), Jul = col_number(),
Ago = col_number(), Sep = col_number(),
Oct = col_number(), Nov = col_number(),
Dic = col_number()))
data <- data[1:608, ]
data$Region <- as.factor(data$Region)
data_split <- split(data, data$`Mean value`)
Y <- as.matrix(data_split[[7]][,7:18])   # N x n response matrix (12
N <- nrow(Y)
n <- ncol(Y)
rownames(Y) <- as.matrix(data_split[[1]][,1])
graph_par()
matplot(t(Y), type = 'l', lty = 1)
text(9.7, 2, TeX('$Y_{71}(t)'), col = N)
lines(1:12, Y[N,], col = N, lwd = 2)
abline(v=4, lty= 2, col = 'grey80')
text(5, 27, expression(y(4)))
points(rep(4, N),Y[,4], pch = 20, col = 'grey40')
K_y <- 8
basis_Y <- create.fourier.basis(rangeval = c(0,12),
nbasis = K_y)
Phi <- t(eval.basis(1:12, basis_Y)) #dimension K_y x n
C_hat <- as.matrix(Y) %*% t(Phi) %*% solve(Phi %*% t(Phi))
dense_t_grid <- seq(0,12, by = 0.1) #as much density as we want
grid_phi <- eval.basis(dense_t_grid, basis_Y)
Y_dense <- C_hat %*% t(grid_phi)
attach(data_split[[7]])
# Covariate design matrix
latitude <- scale(Latitude, scale = TRUE)
altitude <- scale(Altitude, scale = TRUE)
X <- model.matrix(~ Region + latitude + altitude)
colnames(X) <- c('Mean', levels(data$Region)[1:5],
'Latitude', 'Altitude')
p <- ncol(X)
X[1:10,]
# Basis for beta functions
K_beta <- 5
basis_beta <- create.fourier.basis(rangeval = c(0,12),
nbasis = K_beta)
library(fda)
#Matrices matrices
J_YY <- inprod(basis_Y, basis_beta)
J_BB <- inprod(basis_beta, basis_beta)
J_YB <- inprod(basis_Y, basis_beta)
R <- eval.penalty(basis_beta, int2Lfd(2))
#Roughness penalty parameter
lambda <- 0.0000001
# Estimate B
vec_B <- solve(J_BB %x% (t(X) %*% X) + R %x% (lambda*diag(p))) %*% as.vector(t(X) %*% C_hat %*% J_YB)
B <- matrix(vec_B, nrow = ncol(X), ncol = basis_beta$nbasis, byrow = FALSE)
rownames(B) <- colnames(X)
colnames(B) <- basis_beta$names
beta <- B %*% t(eval.basis(dense_t_grid, basis_beta))
graph_par(c(2,2))
par(mar=c(1.2,2,1.5,2), cex.main = 0.9)
plot(dense_t_grid, beta[1,], main = 'Intercept', type = 'l',
ylab = 'temp', lwd = 2)
regions <- rbind(beta[2:6,], -apply(beta[2:6,],2,sum))
rownames(regions) <- levels(data$Region)
matplot(dense_t_grid, t(regions), main = 'Regions', lty = 1,
type = 'l', ylab = '', lwd = 2)
plot(dense_t_grid, beta[7,], main = 'Latitude', type = 'l', ylab = 'temp',
lwd = 2)
plot(dense_t_grid, beta[8,], main = 'Altitude', type = 'l', ylab = '',
lwd = 2)
par(mfrow = c(3,2))
par(mar=c(1,1,1,2))
for(j in 1:6){
plot(dense_t_grid, beta[1,], type = 'l',
ylab = '', lwd = 2, lty = 3,
xaxt = 'n', las = 2, ylim = c(6, 27))
lines(dense_t_grid, beta[1,] + regions[j,],
lwd = 2, col = j)
text(6.5, 23, levels(data$Region)[j])
}
Y_fitted <- X %*% beta
graph_par()
matplot(dense_t_grid, t(Y_fitted),
ylab = 'y fitted', type = 'l', lty = 1)
Theta <- t(eval.basis(1:12, basis_beta))
M <- t(Phi) %*% solve(Phi %*% t(Phi)) %*% J_YB
U <- J_BB %x% (t(X) %*% X) + R %x% (lambda*diag(p))
H <- (t(Theta) %x% X) %*% solve(U) %*% (t(M) %x% t(X))
#Effective degrees of freedom
df <- sum(diag(H))
#The residual functions (high resolution)
resid <-t(Y_dense - Y_fitted)
SQe <- apply(resid, 2, function(x) sum(x^2))
idx <- order(SQe, decreasing = TRUE)[1:2]
graph_par(c(1,2))
plot(dense_t_grid, Y_dense[idx[1],], type = 'l', lwd = 2, main = row.names(Y)[idx[1]],
col = 16, ylab = 'temp', ylim = c(0,30))
lines(dense_t_grid, Y_fitted[idx[1],], lty = 2)
text(9, -3, 'fitted', cex = 1)
plot(dense_t_grid, Y_dense[idx[2],], type = 'l', lwd = 2, main = row.names(Y)[idx[2]],
col = 68, ylab = 'temp', ylim = c(0,30))
lines(dense_t_grid, Y_fitted[idx[2],], lty = 2)
text(11, -10, 'fitted', cex = 1)
graph_par()
sigma2 <- apply(resid, 1, sd)
graph_par()
plot(dense_t_grid, sqrt(sigma2), type = 'l', main = 'Residual standard deviation', ylab = '')
t <- 7
theta_t <- t(eval.basis(t, basis_beta)) #column vector
#The V matrix and its names
V <- (t(theta_t) %x% diag(p)) %*% solve(U) %*% (t(M) %x% t(X))
rownames(V) <- colnames(X)
sigma2_t <- sigma2[which(dense_t_grid == t)]
vcov_t <- V %*% (diag(n) %x% (sigma2_t * diag(N))) %*% t(V)
knitr::kable(t(sqrt(diag(vcov_t))), caption = 'Standard errors of regression coefficients coefficients in t=7')
std_errors <- function(t){
theta_t <- t(eval.basis(t, basis_beta)) #column vector
#The V matrix and its names
V <- (t(theta_t) %x% diag(p)) %*% solve(U) %*% (t(M) %x% t(X))
rownames(V) <- colnames(X)
sigma2_t <- sigma2[which(dense_t_grid == t)]
vcov_t <- V %*% (diag(n) %x% (sigma2_t * diag(N))) %*% t(V)
return(sqrt(diag(vcov_t)))
}
seq <- seq(0, 12, by = 0.2)
beta_months <-  B %*% t(eval.basis(seq, basis_beta))
std_errors <- sapply(seq, std_errors)
Upper <- beta_months[c(1,7,8),] + std_errors[c(1,7,8),]*qnorm(0.95)
Lower <- beta_months[c(1,7,8),] - std_errors[c(1,7,8),]*qnorm(0.95)
par(mfrow=c(1,2))
plot(dense_t_grid,beta[7,], type = 'l', main = 'Latitude', xlab = '',
ylab = '', ylim = c(3,4.5))
segments(x0 = seq,
y0 = t(Lower[2,]),
y1 = t(Upper[2,]),
col = 'lightpink', lwd = 2)
lines(dense_t_grid, beta[7,], lwd = 2)
plot(dense_t_grid,beta[8,], type = 'l', main = 'Altitude', xlab = '',
ylab = '', ylim = c(-3, -1.5))
segments(x0 = seq,
y0 = t(Lower[3,]),
y1 = t(Upper[3,]),
col = 'lightgreen', lwd = 2)
lines(dense_t_grid, beta[8,], lwd = 2)
plot(dense_t_grid,beta[1,], type = 'l', main = 'Overall mean', xlab = '',
ylab = '', ylim = c(0, 25))
segments(x0 = seq,
y0 = t(Lower[1,]),
y1 = t(Upper[1,]),
col = 'salmon', lwd = 2)
lines(dense_t_grid, beta[1,], lwd = 1)
new_latitude <- scale(-20, center = attr(latitude,  "scaled:center"), scale = attr(latitude,  "scaled:scale"))
new_altitude <- scale(300, center = attr(altitude,  "scaled:center"), scale = attr(altitude,  "scaled:scale"))
newdata <- c(1, 0, 0, 0, 1, 0, new_latitude, new_altitude)
mu_predict <- apply(B %*% t(eval.basis(seq, basis_beta)),2, function(x) sum(x*newdata))
estim_errors <- apply(std_errors, 2, function(x) sqrt(crossprod(newdata*x, newdata)))
Upper_estim <- mu_predict + estim_errors*qnorm(0.95)
Lower_estim <- mu_predict - estim_errors*qnorm(0.95)
plot(mu_predict, type = 'l', main = 'Estimation for new location')
segments(x0 = seq,
y0 = t(Lower_estim),
y1 = t(Upper_estim),
col = 'steelblue', lwd = 2)
lines(dense_t_grid, mu_predict, lwd = 1)
estim_errors <- apply(std_errors, 2, function(x) sqrt(crossprod(newdata*x, newdata)))
Upper_estim <- mu_predict + estim_errors*qnorm(0.95)
Lower_estim <- mu_predict - estim_errors*qnorm(0.95)
plot(mu_predict, type = 'l', main = 'Estimation for new location')
segments(x0 = seq,
y0 = t(Lower_estim),
y1 = t(Upper_estim),
col = 'steelblue', lwd = 2)
lines(seq, mu_predict, lwd = 1)
estim_errors <- apply(std_errors, 2, function(x) sqrt(crossprod(newdata*x, newdata)))
Upper_estim <- mu_predict + estim_errors*qnorm(0.95)
Lower_estim <- mu_predict - estim_errors*qnorm(0.95)
plot(seq, mu_predict, type = 'l', main = 'Estimation for new location')
segments(x0 = seq,
y0 = t(Lower_estim),
y1 = t(Upper_estim),
col = 'steelblue', lwd = 2)
lines(seq, mu_predict, lwd = 1)
estim_errors <- apply(std_errors, 2, function(x) sqrt(crossprod(newdata*x, newdata)))
Upper_estim <- mu_predict + estim_errors*qnorm(0.95)
Lower_estim <- mu_predict - estim_errors*qnorm(0.95)
plot(seq, mu_predict, type = 'l', main = 'Mean estimation for new location', ylim = c(15, 40))
segments(x0 = seq,
y0 = t(Lower_estim),
y1 = t(Upper_estim),
col = 'steelblue', lwd = 2)
lines(seq, mu_predict, lwd = 1)
estim_errors <- apply(std_errors, 2, function(x) sqrt(crossprod(newdata*x, newdata)))
Upper_estim <- mu_predict + estim_errors*qnorm(0.95)
Lower_estim <- mu_predict - estim_errors*qnorm(0.95)
plot(seq, mu_predict, type = 'l', main = 'Mean estimation for new location', ylim = c(15, 33))
segments(x0 = seq,
y0 = t(Lower_estim),
y1 = t(Upper_estim),
col = 'steelblue', lwd = 2)
lines(seq, mu_predict, lwd = 1)
estim_errors <- apply(std_errors, 2, function(x) sqrt(crossprod(newdata*x, newdata)))
Upper_estim <- mu_predict + estim_errors*qnorm(0.95)
Lower_estim <- mu_predict - estim_errors*qnorm(0.95)
plot(seq, mu_predict, type = 'l', main = 'Mean estimation for new location', ylim = c(15, 33))
segments(x0 = seq,
y0 = t(Lower_estim),
y1 = t(Upper_estim),
col = 'steelblue', lwd = 2)
lines(seq, mu_predict, lwd = 1)
lines(beta[,1], lty = 2)
estim_errors <- apply(std_errors, 2, function(x) sqrt(crossprod(newdata*x, newdata)))
Upper_estim <- mu_predict + estim_errors*qnorm(0.95)
Lower_estim <- mu_predict - estim_errors*qnorm(0.95)
plot(seq, mu_predict, type = 'l', main = 'Mean estimation for new location', ylim = c(15, 33))
segments(x0 = seq,
y0 = t(Lower_estim),
y1 = t(Upper_estim),
col = 'steelblue', lwd = 2)
lines(seq, mu_predict, lwd = 1)
lines(beta[1,], lty = 2)
estim_errors <- apply(std_errors, 2, function(x) sqrt(crossprod(newdata*x, newdata)))
Upper_estim <- mu_predict + estim_errors*qnorm(0.95)
Lower_estim <- mu_predict - estim_errors*qnorm(0.95)
plot(seq, mu_predict, type = 'l', main = 'Mean estimation for new location', ylim = c(15, 33))
segments(x0 = seq,
y0 = t(Lower_estim),
y1 = t(Upper_estim),
col = 'steelblue', lwd = 2)
lines(seq, mu_predict, lwd = 1)
lines(dense_t_grid, beta[1,], lty = 2)
estim_errors <- apply(std_errors, 2, function(x) sqrt(crossprod(newdata*x, newdata)))
Upper_estim <- mu_predict + estim_errors*qnorm(0.95)
Lower_estim <- mu_predict - estim_errors*qnorm(0.95)
plot(seq, mu_predict, type = 'l', main = 'Mean estimation for new location', ylim = c(15, 33))
segments(x0 = seq,
y0 = t(Lower_estim),
y1 = t(Upper_estim),
col = 'steelblue', lwd = 2)
lines(seq, mu_predict, lwd = 2, col = 'steelblue')
lines(dense_t_grid, beta[1,], lty = 2)
estim_errors <- apply(std_errors, 2, function(x) sqrt(crossprod(newdata*x, newdata)))
Upper_estim <- mu_predict + estim_errors*qnorm(0.95)
Lower_estim <- mu_predict - estim_errors*qnorm(0.95)
plot(seq, mu_predict, type = 'l', main = 'Mean estimation for new location', ylim = c(15, 33))
segments(x0 = seq,
y0 = t(Lower_estim),
y1 = t(Upper_estim),
col = 'steelblue', lwd = 2)
lines(seq, mu_predict, lwd = 2)
lines(dense_t_grid, beta[1,], lty = 2)
estim_errors <- apply(std_errors, 2, function(x) sqrt(crossprod(newdata*x, newdata)))
Upper_estim <- mu_predict + estim_errors*qnorm(0.95)
Lower_estim <- mu_predict - estim_errors*qnorm(0.95)
plot(seq, mu_predict, type = 'l', main = 'Mean estimation for new location', ylim = c(10, 33))
segments(x0 = seq,
y0 = t(Lower_estim),
y1 = t(Upper_estim),
col = 'steelblue', lwd = 2)
lines(seq, mu_predict, lwd = 2)
lines(dense_t_grid, beta[1,], lty = 2)
quarto::quarto_render("SoFR.qmd")
quarto::quarto_version()
quarto.version
quarto render
quarto render
